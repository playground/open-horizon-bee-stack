# Start with a base image that includes git
FROM ubuntu:20.04

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# Set environment variables to prevent interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Install necessary tools (git, curl, etc.)
RUN apt-get update && apt-get install -y \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install dependencies for Docker and Compose
RUN apt-get update && apt-get install -y \
    ca-certificates \
    vim \
    curl \
    gnupg \
    lsb-release

# Add Docker's official GPG key
RUN mkdir -p /etc/apt/keyrings
RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Add Docker repository
RUN echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker and Docker Compose plugin
RUN apt-get update && apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-compose-plugin

# Verify installation
RUN docker --version && docker compose version

# Install NodeJS
RUN curl -sL https://deb.nodesource.com/setup_20.x  | bash -
    RUN apt-get -y install nodejs
    RUN npm install -g npm

# Set the working directory inside the container
WORKDIR /app

# Copy package files first
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy source files
COPY . .

# Build the TypeScript project
RUN npm run build

EXPOSE 8889

# Make another script executable and run it
RUN chmod +x /app/setup.sh
RUN chmod +x /app/entrypoint.sh

RUN echo "source /app/setup.sh" >> ~/.bashrc

ENTRYPOINT ["./entrypoint.sh"]
